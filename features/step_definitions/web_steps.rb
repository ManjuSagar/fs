# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.


require 'uri'
require 'cgi'
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "paths"))

module WithinHelpers
  def with_scope(locator)
    locator ? within(locator) { yield } : yield
  end
end
World(WithinHelpers)

Given /^(?:|I )am on (.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^(?:|I )go to "([^"]*)"$/ do |page_name|
  visit path_to(page_name)
end

When /^(?:|I )visit "([^"]*)" page$/ do |page_name|
  visit "/#{page_name}"
end

When /^(?:|I )go to main menu "([^"]*)" page$/ do |page_name|
  component_name = page_name.camelize
  page.driver.browser.execute_script(<<-JS)
    launchComponent("#{component_name}", "#{page_name}");
  JS
end

When /^(?:|I )select the range from (\d+) to (\d+) within "([^"]*)"$/ do |from, to, selector|
  page.driver.browser.execute_script(<<-JS)
    var grid = Ext.ComponentQuery.query('##{selector}')[0];
    grid.selModel.selectRange(parseInt('#{from}'), parseInt('#{to}'));
  JS
end


When /^(?:|I )press "([^"]*)"(?: within "([^"]*)")?$/ do |button, selector|
  page.driver.browser.execute_script(<<-JS)
    var btn = null;
    if ("#{selector}" != ""){
      var parent = Ext.ComponentQuery.query("##{selector}")[0];
      btn = parent.down("button[text=#{button}]");
      btn = btn || parent.up('window').down("button[tooltip=#{button}]");
    } else {
      btn = Ext.ComponentQuery.query('button[text=#{button}]')[0];
      btn = btn || Ext.ComponentQuery.query('button[tooltip=#{button}]')[0];
    }
    btn.handler == undefined ? btn.fireEvent('click') : btn.handler.call(btn.scope, btn, Ext.EventObject);

  JS
end

When /^(?:|I )add a patient "([^"]*)"?$/ do |name|
  first_name, last_name = name.split(" ")
  step %Q{I fill in "Name:*" with "#{first_name}"}
  step %Q{I wait 3 seconds}
  step %Q{I fill in "#{last_name}" for "Last Name"}
  step %Q{I wait 3 seconds}
  step %Q{I fill in "02/11/1945" for "DOB(mm/dd/yyyy)"}
  step %Q{I select "Male" from combobox "gender"}
  step %Q{I fill in Ext field "ssn" with "123456789"}
  step %Q{I fill in Ext field "medicare_number" with "123456789A"}
  step %Q{I fill in Ext field "street_address" with "30960 Via La Cresta"}
  step %Q{I fill in Ext field "Location" with "90024"}
  step %Q{I wait 5 seconds}
  step %Q{I fill in Ext field "phone_number" with "9003290032"}
  step %Q{I add Patient Insurance Company}
  step %Q{I wait 5 seconds}
  step %Q{I press "Save" within "medicare_eligibility"}
  step %Q{I wait 5 seconds}
  step %Q{I add Referral}
  step %Q{I press "No"}
  #step %Q{I wait 40 seconds}
  #step %Q{I add referral staff "Suzanne Naoumovitch, RN" for discipline "SN"}
  #step %Q{I wait 5 seconds}
  #step %Q{I add referral staff "Therapeutic Touch, Inc." for discipline "PT"}
  #step %Q{I wait 5 seconds}
  #step %Q{I press close button in window with title "Staffing"}
  #step %Q{I wait for the response from the server}
end

When /^(?:|I )press close button in window with title "([^"]*)"?$/ do |title|
  page.driver.browser.execute_script(<<-JS)
    var window = Ext.ComponentQuery.query("window[title=#{title}]")[0];
    window.close();
  JS
  end

When /^(?:|I )press close button in window with id "([^"]*)"?$/ do |id|
  page.driver.browser.execute_script(<<-JS)
    var window = Ext.ComponentQuery.query("##{id}")[0];
    window.close();
  JS
end

When /^I add Patient Insurance Company$/ do ||
  step %Q{I press "Add Insurance Company" within "medicare_eligibility"}
  step %Q{I wait 5 seconds}
  step %Q{I expand combobox "Name"}
  step %Q{I select "Medicare Health Insurance" from combobox "Name"}
  step %Q{I wait 5 seconds}
  step %Q{I fill in "02/11/2012" for "Effective Date"}
  step %Q{I wait 3 seconds}
  step %Q{I press "Save" within "pat_ins_comp_add_form"}
  step %Q{I wait 3 seconds}
  step %Q{I press OK}
  step %Q{I wait for the response from the server}
  step %Q{the grid "patient_insurance_companies_list" should show 1 records}
  step %Q{I wait 3 seconds}
end

When /^I add Referral$/ do ||
  step %Q{I press "Yes"}
  step %Q{I wait for the response from the server}
  step %Q{I expand combobox "Referring Physician"}
  step %Q{I wait for the response from the server}
  step %Q{I select "Adam Adamson, MD" from combobox "Referring Physician"}
  step %Q{I expand combobox "Primary Insurance Company"}
  step %Q{I wait for the response from the server}
  step %Q{I select "Medicare Health Insurance (MEDICARE)" from combobox "Primary Insurance Company"}
  step %Q{I check ext checkbox "SN"}
  step %Q{I wait 3 seconds}
  step %Q{I check ext checkbox "PT"}
  step %Q{I wait 3 seconds}
  step %Q{I check ext checkbox "Referral Received"}
  step %Q{I wait 3 seconds}
  step %Q{I expand combobox "Point Of Origin"}
  step %Q{I wait for the response from the server}
  step %Q{I select "1 - Physician Referral" from combobox "Point Of Origin"}
  step %Q{I press "Save" within "referral_new_form"}
  step %Q{I wait 3 seconds}
end

When /^I add referral staff "([^"]*)" for discipline "([^"]*)"$/ do |staff, discipline|
  step %Q{I press "Add" within "treatment_request_staff_grid"}
  step %Q{I wait for the response from the server}
  step %Q{I expand combobox "Discipline"}
  step %Q{I wait for the response from the server}
  step %Q{I select "#{discipline}" from combobox "Discipline"}
  step %Q{I select ext radio "Show all staffs"}
  step %Q{I wait for the response from the server}
  step %Q{I expand combobox "Staff"}
  step %Q{I wait for the response from the server}
  step %Q{I select "#{staff}" from combobox "Staff"}
  step %Q{I wait 3 seconds}
  step %Q{I press "Save" within "request_staff_add_form"}
  step %Q{I wait 3 seconds}
  step %Q{I press OK}
  step %Q{I wait for the response from the server}
end

When /I visit patient creation page/ do 
  visit '/patients'
end

When /I visit signon page/ do 
  visit '/signin'
end

When /I sleep for 10/ do 
  sleep 10
end

When /I sleep for 5/ do 
  sleep 5
end

When /^(?:|I )press with id "([^"]*)"(?: within "([^"]*)")?$/ do |button, selector|

  with_scope(selector) do
    #click_button(button)
  page.driver.browser.execute_script(<<-JS)
    var btn = Ext.ComponentQuery.query('##{button}')[0];
    btn.handler.call(btn.scope, btn, Ext.EventObject);
  JS
  end
end

When /^(?:|I )scroll down with id "([^"]*)"(?: within "([^"]*)")?$/ do |component_id, selector|
  page.driver.browser.execute_script(<<-JS)
    var form = Ext.ComponentQuery.query('##{component_id}')[0];
    form.scrollBy(0, 100)
  JS
end


When /^(?:|I )click on "([^"]*)"$/ do |text|
  page.driver.browser.execute_script(<<-JS)
    var action = Ext.ComponentQuery.query('[text=#{text}]')[0];
    action.handler.call(action.scope, action, Ext.EventObject);
  JS
end

When /^(?:|I )click on "([^"]*)" within "([^"]*)"$/ do |child_tab, tab_panel|
  page.driver.browser.execute_script(<<-JS)
    var tabs = Ext.ComponentQuery.query('##{tab_panel}')[0];
    var child_tab = tabs.child('##{child_tab}')
    child_tab.tab.show();
    tabs.setActiveTab(child_tab);
  JS
end

When /^(?:|I )click on tab "([^"]*)"$/ do |tab|
  page.driver.browser.execute_script(<<-JS)
    var tab = Ext.ComponentQuery.query("##{tab}")[0];
    tab.show();
  JS
end

When /^(?:|I )follow "([^"]*)"(?: within "([^"]*)")?$/ do |link, selector|
  with_scope(selector) do
    click_link(link)
  end
end

When /^(?:|I )fill in "([^"]*)" with "([^"]*)"(?: within "([^"]*)")?$/ do |field, value, selector|
  with_scope(selector) do
    fill_in(field, :with => value)
  end
end

When /^(?:|I )fill in "([^"]*)" for "([^"]*)"(?: within "([^"]*)")?$/ do |value, field, selector|
  with_scope(selector) do
    fill_in(field, :with => value)
  end
end

# Use this to fill in an entire form with data from a table. Example:
#
#   When I fill in the following:
#     | Account Number | 5002       |
#     | Expiry date    | 2009-11-01 |
#     | Note           | Nice guy   |
#     | Wants Email?   |            |
#
# TODO: Add support for checkbox, select og option
# based on naming conventions.
#
When /^(?:|I )fill in the following(?: within "([^"]*)")?:$/ do |selector, fields|
  with_scope(selector) do
    fields.rows_hash.each do |name, value|
      When %{I fill in "#{name}" with "#{value}"}
    end
  end
end

When /^(?:|I )select "([^"]*)" from "([^"]*)"(?: within "([^"]*)")?$/ do |value, field, selector|
  with_scope(selector) do
    select(value, :from => field)
  end
end

When /^(?:|I )check "([^"]*)"(?: within "([^"]*)")?$/ do |field, selector|
  with_scope(selector) do
    check(field)
  end
end

When /^(?:|I )uncheck "([^"]*)"(?: within "([^"]*)")?$/ do |field, selector|
  with_scope(selector) do
    uncheck(field)
  end
end

When /^(?:|I )choose "([^"]*)"(?: within "([^"]*)")?$/ do |field, selector|
  with_scope(selector) do
    choose(field)
  end
end

When /^(?:|I )attach the file "([^"]*)" to "([^"]*)"(?: within "([^"]*)")?$/ do |path, field, selector|
  with_scope(selector) do
    attach_file(field, path)
  end
end

Then /^(?:|I )should see JSON:$/ do |expected_json|
  require 'json'
  expected = JSON.pretty_generate(JSON.parse(expected_json))
  actual   = JSON.pretty_generate(JSON.parse(response.body))
  expected.should == actual
end

Then /^(?:|I )should see "([^"]*)"(?: within "([^"]*)")?$/ do |text, selector|
  with_scope(selector) do
    if page.respond_to? :should
      page.should have_content(text)
    else
      assert page.has_content?(text)
    end
  end
end

Then /^(?:|I )should see "([^"]*)" or "([^"]*)"(?: within "([^"]*)")?$/ do |text1, text2, selector|
  with_scope(selector) do
    if page.respond_to? :should
      page.should have_content(text1) or page.should have_content(text2)
    else
      assert page.has_content?(text)
    end
  end
end

Then /^(?:|I )wait till i should see "([^"]*)"(?: or "([^"]*)")?$/ do |text1, text2|
  res = false
  Timeout.timeout(20) do
    if page.respond_to? :should
      res = (page.should have_content(text1) or page.should have_content(text2))
    end
    loop until res == true
  end
  res
end

Then /^(?:|I )should see \/([^\/]*)\/(?: within "([^"]*)")?$/ do |regexp, selector|
  regexp = Regexp.new(regexp)
  with_scope(selector) do
    if page.respond_to? :should
      page.should have_xpath('//*', :text => regexp)
    else
      assert page.has_xpath?('//*', :text => regexp)
    end
  end
end

Then /^(?:|I )should not see "([^"]*)"(?: within "([^"]*)")?$/ do |text, selector|
  with_scope(selector) do
    if page.respond_to? :should
      page.should have_no_content(text)
    else
      assert page.has_no_content?(text)
    end
  end
end

Then /^(?:|I )should not see \/([^\/]*)\/(?: within "([^"]*)")?$/ do |regexp, selector|
  regexp = Regexp.new(regexp)
  with_scope(selector) do
    if page.respond_to? :should
      page.should have_no_xpath('//*', :text => regexp)
    else
      assert page.has_no_xpath?('//*', :text => regexp)
    end
  end
end

Then /^the "([^"]*)" field(?: within "([^"]*)")? should contain "([^"]*)"$/ do |field, selector, value|
  with_scope(selector) do
    field = find_field(field)
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
    if field_value.respond_to? :should
      field_value.should =~ /#{value}/
    else
      assert_match(/#{value}/, field_value)
    end
  end
end

Then /^the "([^"]*)" field(?: within "([^"]*)")? should not contain "([^"]*)"$/ do |field, selector, value|
  with_scope(selector) do
    field = find_field(field)
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
    if field_value.respond_to? :should_not
      field_value.should_not =~ /#{value}/
    else
      assert_no_match(/#{value}/, field_value)
    end
  end
end

Then /^the "([^"]*)" checkbox(?: within "([^"]*)")? should be checked$/ do |label, selector|
  with_scope(selector) do
    field_checked = find_field(label)['checked']
    if field_checked.respond_to? :should
      field_checked.should be_true
    else
      assert field_checked
    end
  end
end

Then /^the "([^"]*)" checkbox(?: within "([^"]*)")? should not be checked$/ do |label, selector|
  with_scope(selector) do
    field_checked = find_field(label)['checked']
    if field_checked.respond_to? :should
      field_checked.should be_false
    else
      assert !field_checked
    end
  end
end

Then /^(?:|I )should be on (.+)$/ do |page_name|
  current_path = URI.parse(current_url).path
  if current_path.respond_to? :should
    current_path.should == path_to(page_name)
  else
    assert_equal path_to(page_name), current_path
  end
end

Then /^(?:|I )should have the following query string:$/ do |expected_pairs|
  query = URI.parse(current_url).query
  actual_params = query ? CGI.parse(query) : {}
  expected_params = {}
  expected_pairs.rows_hash.each_pair{|k,v| expected_params[k] = v.split(',')}

  if actual_params.respond_to? :should
    actual_params.should == expected_params
  else
    assert_equal expected_params, actual_params
  end
end

Then /^show me the page$/ do
  save_and_open_page
end
