/*
 * File: app/controller/RoutesheetController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.RoutesheetController', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            routesheetForm: {
                selector: '#routesheet_form',
                xtype: 'Ext.form.Panel'
            },
            routesheetList: {
                selector: '#routesheets_list',
                xtype: 'Ext.dataview.List'
            }
        },

        control: {
            "button#save_routesheet": {
                tap: 'onSaveRoutesheet'
            },
            "panel#routesheet_form": {
                activate: 'onRoutesheetFormActivate'
            },
            "button#cmdDelete": {
                tap: 'onDeleteRoutesheet'
            }
        }
    },

    onSaveRoutesheet: function(button, e, eOpts) {
        button.hide();
        var routesheetStore = Ext.StoreManager.lookup("RoutesheetStore");
        var routesheetInstance = this.getRoutesheetForm().getRecord();
        var patientSignature = this.getRoutesheetForm().down("signaturefield").getValue();
        if (patientSignature == null) {
            button.show();
            Ext.Msg.alert("Alert!", "Please capture Patient's signature.");
            return;
        }
        routesheetInstance.set("patient_signature", patientSignature);
        routesheetInstance.set("visit_type_id", this.getRoutesheetForm().down("#visit_type").getValue());
        routesheetStore.add(routesheetInstance);
        routesheetStore.sync();

        Ext.Msg.alert("Success", "Routesheet saved successfully.", function () {
            MyApp.app.getController("MainController").getNavView().pop(2);
            MyApp.app.getController("MainController").getMainTab().setActiveItem(2);
        });

    },

    onRoutesheetFormActivate: function(container, newActiveItem, oldActiveItem, eOpts) {
        this.getLocation(this);
    },

    onDeleteRoutesheet: function(button, e, eOpts) {
        if (this.getRoutesheetList().getSelectionCount() == 0) {
            Ext.Msg.alert("Delete Routesheet", "Please select a routesheet to delete.");
            return;
        }
        this.routesheetStore = Ext.StoreManager.lookup("RoutesheetStore");
        Ext.each(this.getRoutesheetList().getSelection(), function(record) {
            this.routesheetStore.remove(record);
        }, this);
        this.routesheetStore.sync();

    },

    locationDetected: function(position) {
        var record = MyApp.app.getController("RoutesheetController").getRoutesheetForm().getRecord();
        record.set("latitude", position.coords.latitude);
        record.set("longitude", position.coords.longitude);
        MyApp.app.getController("RoutesheetController").getRoutesheetForm().setRecord(record);
        Ext.Viewport.setMasked(false);
    },

    locationError: function(error) {
        var errorMessage;
        switch(error.code)
        {
            case error.PERMISSION_DENIED:
            errorMessage="User denied the request for Geolocation."
            break;
            case error.POSITION_UNAVAILABLE:
            errorMessage="Location information is unavailable."
            break;
            case error.TIMEOUT:
            errorMessage="The request to get user location timed out."
            break;
            case error.UNKNOWN_ERROR:
            errorMessage="An unknown error occurred."
            break;
        }
        Ext.Viewport.setMasked(false);
    },

    getLocation: function(listener) {
        if (navigator.geolocation) {
            Ext.Viewport.setMasked({
                xtype: 'loadmask',
                message: 'Detecting Location...'
            });
            navigator.geolocation.getCurrentPosition(listener.locationDetected, listener.locationError);
        } else {
            Ext.Msg.alert("Geolocation is not supported by your device.");
        }

    }

});